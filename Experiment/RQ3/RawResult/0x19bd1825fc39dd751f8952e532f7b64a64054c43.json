[
  {
    "contract": "Taiga",
    "function": "_transfer",
    "explanation": "Comment specifies 25% tax for 24h sellers but code applies 15% fee",
    "violated_comment": "// TAX SELLERS 25% WHO SELL WITHIN 24 HOURS",
    "contract_code": "\n=== Implementation of Function _transfer(address,address,uint256) ===\nfunction _transfer(address from, address to, uint256 amount) private {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n        require(amount > 0, \"Transfer amount must be greater than zero\");\r\n    \r\n         _feeAddr1 = 0;\r\n        if (!_isBuy(from)) {\r\n            if (_buyMap[from] != 0 &&\r\n                (_buyMap[from] + (24 hours) >= block.timestamp))  {\r\n                _feeAddr2 = 15;\r\n            } else if (_buyMap[from] != 0 &&\r\n                       _buyMap[from] + (60 minutes) >= block.timestamp\r\n                       ) { \r\n                _feeAddr2 = 30;\r\n            } else {\r\n                _feeAddr2 = 8;\r\n            }\r\n        } else {\r\n            if (_buyMap[to] == 0) {\r\n                _buyMap[to] = block.timestamp;\r\n            }\r\n            _feeAddr2 = 8;\r\n        }\r\n        \r\n        if (from != owner() && to != owner()) {\r\n            require(!bots[from] && !bots[to]);\r\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] && cooldownEnabled) {\r\n                require(amount <= _maxTxAmount);\r\n                require(cooldown[to] < block.timestamp);\r\n                cooldown[to] = block.timestamp + (30 seconds);\r\n            }\r\n            \r\n            \r\n            uint256 contractTokenBalance = balanceOf(address(this));\r\n            if (!inSwap && from != uniswapV2Pair && swapEnabled) {\r\n                swapTokensForEth(contractTokenBalance);\r\n                uint256 contractETHBalance = address(this).balance;\r\n                if(contractETHBalance > 0) {\r\n                    sendETHToFee(address(this).balance);\r\n                }\r\n            }\r\n        }\r\n\t\t\r\n        _tokenTransfer(from,to,amount);\r\n    }\n    \n=== Functions that function _transfer internally calls ===\nfunction _isBuy(address _sender) private view returns (bool) {\r\n        return _sender == uniswapV2Pair;\r\n    }\nfunction _tokenTransfer(address sender, address recipient, uint256 amount) private {\r\n        _transferStandard(sender, recipient, amount);\r\n    }\nfunction balanceOf(address account) public view override returns (uint256) {\r\n        return tokenFromReflection(_rOwned[account]);\r\n    }\nfunction owner() public view returns (address) {\r\n        return _owner;\r\n    }\nfunction sendETHToFee(uint256 amount) private {\r\n        _feeAddrWallet1.transfer(amount.div(2));\r\n        _feeAddrWallet2.transfer(amount.div(2));\r\n    }\nfunction swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(this);\r\n        path[1] = uniswapV2Router.WETH();\r\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\r\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n            tokenAmount,\r\n            0,\r\n            path,\r\n            address(this),\r\n            block.timestamp\r\n        );\r\n    }",
    "rewritten_code": {
      "_transfer": "function _transfer(address from, address to, uint256 amount) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n    \n         _feeAddr1 = 0;\n        if (!_isBuy(from)) {\n            if (_buyMap[from] != 0 &&\n                (_buyMap[from] + (24 hours) >= block.timestamp))  {\n                _feeAddr2 = 25;\n            } else if (_buyMap[from] != 0 &&\n                       _buyMap[from] + (60 minutes) >= block.timestamp\n                       ) { \n                _feeAddr2 = 30;\n            } else {\n                _feeAddr2 = 8;\n            }\n        } else {\n            if (_buyMap[to] == 0) {\n                _buyMap[to] = block.timestamp;\n            }\n            _feeAddr2 = 8;\n        }\n        \n        if (from != owner() && to != owner()) {\n            require(!bots[from] && !bots[to]);\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] && cooldownEnabled) {\n                require(amount <= _maxTxAmount);\n                require(cooldown[to] < block.timestamp);\n                cooldown[to] = block.timestamp + (30 seconds);\n            }\n            \n            \n            uint256 contractTokenBalance = balanceOf(address(this));\n            if (!inSwap && from != uniswapV2Pair && swapEnabled) {\n                swapTokensForEth(contractTokenBalance);\n                uint256 contractETHBalance = address(this).balance;\n                if(contractETHBalance > 0) {\n                    sendETHToFee(address(this).balance);\n                }\n            }\n        }\n        \n        _tokenTransfer(from,to,amount);\n    }"
    }
  }
]