[
  {
    "contract": "ERC721A",
    "function": "tokenByIndex",
    "explanation": "Missing index validation against total supply",
    "violated_comment": "Returns a token ID at a given `index` of all the tokens stored by the contract.",
    "contract_code": "\n=== Implementation of Function tokenByIndex(uint256) ===\nfunction tokenByIndex(uint256 index) public view override returns (uint256) {\n        uint256 numMintedSoFar = _currentIndex;\n        uint256 tokenIdsIdx;\n\n        unchecked {\n            for (uint256 i; i < numMintedSoFar; i++) {\n                TokenOwnership memory ownership = _ownerships[i];\n                if (!ownership.burned) {\n                    if (tokenIdsIdx == index) {\n                        return i;\n                    }\n                    tokenIdsIdx++;\n                }\n            }\n        }\n        revert TokenIndexOutOfBounds();\n    }\n    ",
    "rewritten_code": {
      "tokenByIndex(uint256)": "function tokenByIndex(uint256 index) public view override returns (uint256) {\n        if (index >= totalSupply()) revert TokenIndexOutOfBounds();\n        uint256 numMintedSoFar = _currentIndex;\n        uint256 tokenIdsIdx;\n\n        unchecked {\n            for (uint256 i; i < numMintedSoFar; i++) {\n                TokenOwnership memory ownership = _ownerships[i];\n                if (!ownership.burned) {\n                    if (tokenIdsIdx == index) {\n                        return i;\n                    }\n                    tokenIdsIdx++;\n                }\n            }\n        }\n        revert TokenIndexOutOfBounds();\n    }"
    }
  },
  {
    "contract": "MerkleProof",
    "function": "processProof",
    "explanation": "Code checks hash order, but comment states pairs are pre-sorted.",
    "violated_comment": "When processing the proof, the pairs of leafs & pre-images are assumed to be sorted.",
    "contract_code": "\n=== Implementation of Function processProof(bytes32[],bytes32) ===\nfunction processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                computedHash = _efficientHash(computedHash, proofElement);\n            } else {\n                computedHash = _efficientHash(proofElement, computedHash);\n            }\n        }\n        return computedHash;\n    }\n    \n=== Functions that function processProof internally calls ===\nfunction _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\n        assembly {\n            mstore(0x00, a)\n            mstore(0x20, b)\n            value := keccak256(0x00, 0x40)\n        }\n    }",
    "rewritten_code": {
      "processProof": "function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n    bytes32 computedHash = leaf;\n    for (uint256 i = 0; i < proof.length; i++) {\n        computedHash = _efficientHash(computedHash, proof[i]);\n    }\n    return computedHash;\n}"
    }
  }
]